diff --git a/node_modules/dropbox/cjs/src/auth.js b/node_modules/dropbox/cjs/src/auth.js
index 9b0d92f..ebe48d9 100644
--- a/node_modules/dropbox/cjs/src/auth.js
+++ b/node_modules/dropbox/cjs/src/auth.js
@@ -28,7 +28,7 @@ var crypto;
 if ((0, _utils.isBrowserEnv)()) {
   crypto = window.crypto || window.msCrypto; // for IE11
 } else {
-  crypto = require('crypto'); // eslint-disable-line global-require
+  crypto = require('react-native-crypto'); // eslint-disable-line global-require
 }
 
 var Encoder;
diff --git a/node_modules/dropbox/cjs/src/dropbox.js b/node_modules/dropbox/cjs/src/dropbox.js
index 78b6dbd..eacf04b 100644
--- a/node_modules/dropbox/cjs/src/dropbox.js
+++ b/node_modules/dropbox/cjs/src/dropbox.js
@@ -11,6 +11,8 @@ var _routes = require("../lib/routes.js");
 
 var _auth = require("./auth.js");
 
+const RNFetchBlob = require("rn-fetch-blob").default
+
 var _utils = require("./utils.js");
 
 var _response = require("./response.js");
@@ -176,11 +178,19 @@ var Dropbox = /*#__PURE__*/function () {
         _this2.setCommonHeaders(fetchOptions);
 
         return fetchOptions;
-      }).then(function (fetchOptions) {
-        return fetch((0, _utils.getBaseURL)(host) + path, fetchOptions);
-      }).then(function (res) {
+      })
+      .then(fetchOptions => RNFetchBlob.config({
+        // add this option that makes response data to be stored as a file,
+        // this is much more performant.
+        fileCache : true,
+      }).fetch(
+        fetchOptions.method,
+        (0, _utils.getBaseURL)(host) + path,
+        fetchOptions.headers
+      ))
+      /*.then(function (res) {
         return (0, _response.parseDownloadResponse)(res);
-      });
+      });*/
     }
   }, {
     key: "uploadRequest",
@@ -192,10 +202,10 @@ var Dropbox = /*#__PURE__*/function () {
           throw new Error("Unexpected auth type: ".concat(auth));
         }
 
-        var contents = args.contents;
-        delete args.contents;
+        var localPath = args.localPath;
+        delete args.localPath;
         var fetchOptions = {
-          body: contents,
+          localPath,
           method: 'POST',
           headers: {
             Authorization: "Bearer ".concat(_this3.auth.getAccessToken()),
@@ -207,11 +217,26 @@ var Dropbox = /*#__PURE__*/function () {
         _this3.setCommonHeaders(fetchOptions);
 
         return fetchOptions;
-      }).then(function (fetchOptions) {
-        return _this3.fetch((0, _utils.getBaseURL)(host) + path, fetchOptions);
-      }).then(function (res) {
+      }).then(async function (fetchOptions) {
+        let localFilePath = fetchOptions.localPath
+        return RNFetchBlob.fetch(
+          fetchOptions.method,
+          (0, _utils.getBaseURL)(host) + path,
+          fetchOptions.headers,
+          RNFetchBlob.wrap(localFilePath)
+        )
+        //return _this3.fetch((0, _utils.getBaseURL)(host) + path, fetchOptions);
+      }).then((res) => {
+        var text = res.text()
+        try {
+          return JSON.parse(text)
+        } catch (e) {
+          throw text
+        }
+      })
+      /*.then(function (res) {
         return (0, _response.parseResponse)(res);
-      });
+      });*/
     }
   }, {
     key: "setCommonHeaders",
diff --git a/node_modules/dropbox/package.json b/node_modules/dropbox/package.json
index e71a8c2..735c203 100644
--- a/node_modules/dropbox/package.json
+++ b/node_modules/dropbox/package.json
@@ -4,7 +4,6 @@
     "registry": "npm",
     "description": "The Dropbox JavaScript SDK is a lightweight, promise based interface to the Dropbox v2 API that works in both nodejs and browser environments.",
     "main": "cjs/index.js",
-    "browser": "dist/Dropbox-sdk.min.js",
     "typings": "types/index",
     "types": "types/index",
     "module": "es/index.js",